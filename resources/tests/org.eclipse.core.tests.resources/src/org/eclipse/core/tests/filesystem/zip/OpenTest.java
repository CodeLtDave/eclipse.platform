/*******************************************************************************
 * Copyright (c) 2024 Vector Informatik GmbH and others.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse
 * Public License 2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors: Vector Informatik GmbH - initial API and implementation
 *******************************************************************************/

package org.eclipse.core.tests.filesystem.zip;

import static org.eclipse.core.tests.filesystem.zip.ZipFileSystemTestUtil.assertTextFileContent;
import static org.eclipse.core.tests.filesystem.zip.ZipFileSystemTestUtil.ensureExists;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.IOException;
import java.net.URISyntaxException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class OpenTest {

	@BeforeEach
	public void setup() throws Exception {
		ZipFileSystemTestSetup.setup(new String[] {});
	}

	@AfterEach
	public void teardown() throws Exception {
		ZipFileSystemTestSetup.teardown();
	}

	@Test
	public void testOpenEmptyZipFile() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.firstProject,
				ZipFileSystemTestSetup.EMPTY_ZIP_FILE_NAME);
		IProject project = ZipFileSystemTestSetup.firstProject;
		IFile zipFile = project.getFile(ZipFileSystemTestSetup.EMPTY_ZIP_FILE_NAME);
		ensureExists(zipFile);

		try {
			ZipFileSystemTestUtil.openZipFile(zipFile);
		} catch (CoreException e) {
			ensureExists(zipFile);
			assertEquals("Zip File has no children", e.getMessage());
		}
	}

	@Test
	public void testOpenNestedZipFileParent() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.firstProject,
				ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.firstProject
				.getFile(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(nestedZipFileParent);
		ZipFileSystemTestUtil.openZipFile(nestedZipFileParent);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.firstProject
				.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(openedNestedZipFileParent);
	}

	@Test
	public void testOpenNestedZipFileChild() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.firstProject,
				ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.firstProject
				.getFile(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(nestedZipFileParent);
		ZipFileSystemTestUtil.openZipFile(nestedZipFileParent);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.firstProject
				.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(openedNestedZipFileParent);
		IFile nestedZipFileChild = openedNestedZipFileParent.getFile(ZipFileSystemTestSetup.NESTED_ZIP_FILE_CHILD_NAME);
		ensureExists(nestedZipFileChild);
		ZipFileSystemTestUtil.openZipFile(nestedZipFileChild);
		IFolder openedNestedZipFileChild = openedNestedZipFileParent
				.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_CHILD_NAME);
		ensureExists(openedNestedZipFileChild);
	}

	@Test
	public void testOpenDeepNestedTextFile() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyAndOpenNestedZipFileIntoProject();
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.firstProject
				.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);

		String nestedPath = "sub1/Text.txt";
		IFile nestedFile = openedNestedZipFileParent.getFile(nestedPath);
		ensureExists(nestedFile);
		assertTextFileContent(nestedFile, "Hello World!");

		String deepNestedPath = "sub1/sub2/sub3/sub4/sub5/sub6/sub8/sub9/sub10/Text.txt";
		IFile deepNestedFile = openedNestedZipFileParent.getFile(deepNestedPath);
		ensureExists(deepNestedFile);
		assertTextFileContent(deepNestedFile, "Hello World!");
	}

	@Test
	public void testOpenFakeZip() {
		try {
			ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.firstProject,
					ZipFileSystemTestSetup.FAKE_ZIP_FILE_NAME);
			IFile fakeZipFile = ZipFileSystemTestSetup.firstProject.getFile(ZipFileSystemTestSetup.FAKE_ZIP_FILE_NAME);
			ensureExists(fakeZipFile);

			ZipFileSystemTestUtil.openZipFile(fakeZipFile);
			fail("Expected an IOException due to incorrect file header.");
		} catch (CoreException e) {
			String expectedMessage = "Failed to open ZIP file due to incorrect file header: "
					+ ZipFileSystemTestSetup.FAKE_ZIP_FILE_NAME;
			assertTrue("Expected different error message", e.getMessage().contains(expectedMessage));
		} catch (Exception e) {
			fail("Expected a CoreException, but got a different type of exception.");
		}
	}
}
