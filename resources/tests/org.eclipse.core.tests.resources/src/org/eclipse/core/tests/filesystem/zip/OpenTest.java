/*******************************************************************************
 * Copyright (c) 2024 IBM Corporation and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.core.tests.filesystem.zip;

import static org.eclipse.core.tests.filesystem.zip.ZipFileSystemTestUtil.assertTextFileContent;
import static org.eclipse.core.tests.filesystem.zip.ZipFileSystemTestUtil.ensureExists;
import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.net.URISyntaxException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class OpenTest {

	private static final String EMPTY_ZIP_FILE_NAME = "Empty.zip";
	private static final String NESTED_ZIP_FILE_PARENT_NAME = "NestedZipFileParent.zip";
	private static final String NESTED_ZIP_FILE_CHILD_NAME = "NestedZipFileChild.zip";


	@Before
	public void setup() throws Exception {
		ZipFileSystemTestSetup.setup(new String[] {});
	}

	@After
	public void teardown() throws Exception {
		ZipFileSystemTestSetup.teardown();
	}

	@Test
	public void testOpenEmptyZipFile() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoJavaProject(ZipFileSystemTestSetup.firstProject, EMPTY_ZIP_FILE_NAME);
		IProject project = ZipFileSystemTestSetup.firstProject;
		IFile zipFile = project.getFile(EMPTY_ZIP_FILE_NAME);
		ensureExists(zipFile);

		try {
			ZipFileSystemTestUtil.openZipFile(zipFile);
		} catch (CoreException e) {
			ensureExists(zipFile);
			assertEquals("Zip File has no children", e.getMessage());
		}
	}

	@Test
	public void testOpenNestedZipFileParent() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoJavaProject(ZipFileSystemTestSetup.firstProject,
				NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.firstProject.getFile(NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(nestedZipFileParent);
		ZipFileSystemTestUtil.openZipFile(nestedZipFileParent);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.firstProject.getFolder(NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(openedNestedZipFileParent);
	}

	@Test
	public void testOpenNestedZipFileChild() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoJavaProject(ZipFileSystemTestSetup.firstProject,
				NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.firstProject.getFile(NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(nestedZipFileParent);
		ZipFileSystemTestUtil.openZipFile(nestedZipFileParent);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.firstProject.getFolder(NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(openedNestedZipFileParent);
		IFile nestedZipFileChild = openedNestedZipFileParent.getFile(NESTED_ZIP_FILE_CHILD_NAME);
		ensureExists(nestedZipFileChild);
		ZipFileSystemTestUtil.openZipFile(nestedZipFileChild);
		IFolder openedNestedZipFileChild = openedNestedZipFileParent.getFolder(NESTED_ZIP_FILE_CHILD_NAME);
		ensureExists(openedNestedZipFileChild);
	}

	@Test
	public void testDeepNestedTextFile() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoJavaProject(ZipFileSystemTestSetup.firstProject,
				NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.firstProject.getFile(NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(nestedZipFileParent);
		ZipFileSystemTestUtil.openZipFile(nestedZipFileParent);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.firstProject.getFolder(NESTED_ZIP_FILE_PARENT_NAME);
		ensureExists(openedNestedZipFileParent);

		String nestedPath = "sub1/Text.txt";
		IFile nestedFile = openedNestedZipFileParent.getFile(nestedPath);
		System.out.println("Versuchter Pfad: " + nestedFile.getFullPath());
		ensureExists(nestedFile);
		assertTextFileContent(nestedFile, "Hello World!");

		String deepNestedPath = "sub1/sub2/sub3/sub4/sub5/sub6/sub8/sub9/sub10/Text.txt";
		IFile deepNestedFile = openedNestedZipFileParent.getFile(deepNestedPath);
		System.out.println("Versuchter Pfad: " + deepNestedFile.getFullPath());
		ensureExists(deepNestedFile);
		assertTextFileContent(deepNestedFile, "Hello World!");
	}
}
